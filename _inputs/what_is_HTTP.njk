{% block Css_links %}
    <link rel="stylesheet" href="../_components/main.css" type="text/css">
    <link rel="stylesheet" href="../_components/next_steps.css" type="text/css">
{% endblock %}
{% set body_class = "home" %}
{% set Title = "Web docs" %}
{% set Title_h1 = "What is HTTP?" %}
{% extends "../_includes/base.njk" %}
{% block Content %}
    <div class="block">
        <span class="seoSummary"><strong>HTTP</strong> is</span> a <a class="glossaryLink"
                                                                      href="/en-US/docs/Glossary/protocol"
                                                                      title="protocol: A protocol is a system of rules that define how data is exchanged within or between computers. Communications between devices require that the devices agree on the format of the data that is being exchanged. The set of rules that defines a format is called a protocol.">protocol</a>
        which allows the fetching of resources, such as HTML documents. It is <span class="seoSummary">the foundation of any data exchange on the Web and it is a client-server protocol, which means requests are initiated by the recipient, usually the Web browser. A complete document is reconstructed from the different sub-documents fetched, for instance text, layout description, images, videos, scripts, and more</span>.</p>
        <p><img alt="A Web document is the composition of different resources"
                src="https://mdn.mozillademos.org/files/13677/Fetching_a_page.png" style="height: 319px; width: 545px;">
        </p>

        <p>Clients and servers communicate by exchanging individual messages (as opposed to a stream of data). The
            messages sent by the client, usually a Web browser, are called <em>requests</em> and the messages sent by
            the server as an answer are called <em>responses</em>.</p>

        <p>
            <img alt="HTTP as an application layer protocol, on top of TCP (transport layer) and IP (network layer) and below the presentation layer."
                 src="https://mdn.mozillademos.org/files/13673/HTTP%20&amp;%20layers.png"
                 style="float: left; height: 299px; padding-bottom: 15px; padding-right: 20px; width: 418px;">Designed
            in the early 1990s, HTTP is an extensible protocol which has evolved over time. It is an application layer
            protocol that is sent over <a class="glossaryLink" href="/en-US/docs/Glossary/TCP"
                                          title="TCP: TCP (Transmission Control Protocol) is an important network protocol that lets two hosts connect and exchange data streams.  TCP guarantees the delivery of data and packets in the same order as they were sent.  Vint Cerf and Bob Kahn, who were DARPA scientists at the time, designed TCP in the 1970s.">TCP</a>,
            or over a <a class="glossaryLink" href="/en-US/docs/Glossary/TLS"
                         title="TLS: Transport Layer Security (TLS), formerly known as Secure Sockets Layer (SSL), is a protocol used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols. Both SSL and TLS are client / server protocols that ensure communication privacy by using cryptographic protocols to provide security over a network. When a server and client communicate using TLS, it ensures that no third party can eavesdrop or tamper with any message.">TLS</a>-encrypted
            TCP connection, though any reliable transport protocol could theoretically be used. Due to its
            extensibility, it is used to not only fetch hypertext documents, but also images and videos or to post
            content to servers, like with HTML form results. HTTP can also be used to fetch parts of documents to update
            Web pages on demand.</p>

        <h2 id="Components_of_HTTP-based_systems">Components of HTTP-based systems</h2>

        <p>HTTP is a client-server protocol: requests are sent by one entity, the user-agent (or a proxy on behalf of
            it). Most of the time the user-agent is a Web browser, but it can be anything, for example a robot that
            crawls the Web to populate and maintain a search engine index.</p>

        <p>Each individual request is sent to a server, which handles it and provides an answer, called the
            <em>response</em>. Between the client and the server there are numerous entities, collectively called <a
                    class="glossaryLink" href="/en-US/docs/Glossary/Proxy_server"
                    title="proxies: A proxy server is an intermediate program or computer used when navigating through different networks of the Internet. They facilitate access to content on the World Wide Web. A proxy intercepts requests and serves back responses; it may forward the requests, or not (for example in the case of a cache), and it may modify it (for example changing its headers, at the boundary between two networks).">proxies</a>,
            which perform different operations and act as gateways or <a class="glossaryLink"
                                                                         href="/en-US/docs/Glossary/Cache"
                                                                         title="caches: A cache (web cache or HTTP cache) is a component that stores HTTP responses temporarily so that it can be used for subsequent HTTP requests as long as it meets certain conditions.">caches</a>,
            for example.</p>

        <p><img alt="Client server chain" src="https://mdn.mozillademos.org/files/13679/Client-server-chain.png"></p>

        <p>In reality, there are more computers between a browser and the server handling the request: there are
            routers, modems, and more. Thanks to the layered design of the Web, these are hidden in the network and
            transport layers. HTTP is on top, at the application layer. Although important to diagnose network problems,
            the underlying layers are mostly irrelevant to the description of HTTP.</p>

        <h3 id="Client_the_user-agent">Client: the user-agent</h3>

        <p>The <em>user-agent</em> is any tool that acts on the behalf of the user. This role is primarily performed by
            the Web browser; other possibilities are programs used by engineers and Web developers to debug their
            applications.</p>

        <p>The browser is <strong>always</strong> the entity initiating the request. It is never the server (though some
            mechanisms have been added over the years to simulate server-initiated messages).</p>

        <p>To present a Web page, the browser sends an original request to fetch the HTML document that represents the
            page. It then parses this file, making additional requests corresponding to execution scripts, layout
            information (CSS) to display, and sub-resources contained within the page (usually images and videos). The
            Web browser then mixes these resources to present to the user a complete document, the Web page. Scripts
            executed by the browser can fetch more resources in later phases and the browser updates the Web page
            accordingly.</p>

        <p>A Web page is a hypertext document. This means some parts of displayed text are links which can be activated
            (usually by a click of the mouse) to fetch a new Web page, allowing the user to direct their user-agent and
            navigate through the Web. The browser translates these directions in HTTP requests, and further interprets
            the HTTP responses to present the user with a clear response.</p>

        <h3 id="The_Web_server">The Web server</h3>

        <p>On the opposite side of the communication channel, is the server, which <em>serves</em> the document as
            requested by the client. A server appears as only a single machine virtually: this is because it may
            actually be a collection of servers, sharing the load (load balancing) or a complex piece of software
            interrogating other computers (like cache, a DB server, or e-commerce servers), totally or partially
            generating the document on demand.</p>

        <p>A server is not necessarily a single machine, but several server software instances can be hosted on the same
            machine. With HTTP/1.1 and the <a href="/en-US/docs/Web/HTTP/Headers/Host"
                                              title="The Host request header specifies the domain name of the server (for virtual hosting), and (optionally) the TCP port number on which the server is listening."><code>Host</code></a>
            header, they may even share the same IP address.</p>

        <h3 id="Proxies">Proxies</h3>

        <p>Between the Web browser and the server, numerous computers and machines relay the HTTP messages. Due to the
            layered structure of the Web stack, most of these operate at the transport, network or physical levels,
            becoming transparent at the HTTP layer and potentially making a significant impact on performance. Those
            operating at the application layers are generally called <strong>proxies</strong>. These can be transparent,
            forwarding on the requests they receive without altering them in any way, or non-transparent, in which case
            they will change the request in some way before passing it along to the server. Proxies may perform numerous
            functions:</p>

        <ul>
            <li>caching (the cache can be public or private, like the browser cache)</li>
            <li>filtering (like an antivirus scan or parental controls)</li>
            <li>load balancing (to allow multiple servers to serve the different requests)</li>
            <li>authentication (to control access to different resources)</li>
            <li>logging (allowing the storage of historical information)</li>
        </ul>

        <h2 id="Basic_aspects_of_HTTP">Basic aspects of HTTP</h2>

        <h3 id="HTTP_is_simple">HTTP is simple</h3>

        <p>HTTP is generally designed to be simple and human readable, even with the added complexity introduced in
            HTTP/2 by encapsulating HTTP messages into frames. HTTP messages can be read and understood by humans,
            providing easier testing for developers, and reduced complexity for newcomers.</p>

        <h3 id="HTTP_is_extensible">HTTP is extensible</h3>

        <p>Introduced in HTTP/1.0, <a href="/en-US/docs/Web/HTTP/Headers">HTTP headers</a> make this protocol easy to
            extend and experiment with. New functionality can even be introduced by a simple agreement between a client
            and a server about a new header's semantics.</p>

        <h3 id="HTTP_is_stateless_but_not_sessionless">HTTP is stateless, but not sessionless</h3>

        <p>HTTP is stateless: there is no link between two requests being successively carried out on the same
            connection. This immediately has the prospect of being problematic for users attempting to interact with
            certain pages coherently, for example, using e-commerce shopping baskets. But while the core of HTTP itself
            is stateless, HTTP cookies allow the use of stateful sessions. Using header extensibility, HTTP Cookies are
            added to the workflow, allowing session creation on each HTTP request to share the same context, or the same
            state.</p>

        <h3 id="HTTP_and_connections">HTTP and connections</h3>

        <p>A connection is controlled at the transport layer, and therefore fundamentally out of scope for HTTP. Though
            HTTP doesn't require the underlying transport protocol to be connection-based; only requiring it to be <em>reliable</em>,
            or not lose messages (so at minimum presenting an error). Among the two most common transport protocols on
            the Internet, TCP is reliable and UDP isn't. HTTP therefore relies on the TCP standard, which is
            connection-based.</p>

        <p>Before a client and server can exchange an HTTP request/response pair, they must establish a TCP connection,
            a process which requires several round-trips. The default behavior of HTTP/1.0 is to open a separate TCP
            connection for each HTTP request/response pair. This is less efficient than sharing a single TCP connection
            when multiple requests are sent in close succession.</p>

        <p>In order to mitigate this flaw, HTTP/1.1 introduced <em>pipelining</em> (which proved difficult to implement)
            and <em>persistent connections</em>: the underlying TCP connection can be partially controlled using the <a
                    href="/en-US/docs/Web/HTTP/Headers/Connection"
                    title="The Connection general header controls whether or not the network connection stays open after the current transaction finishes. If the value sent is keep-alive, the connection is persistent and not closed, allowing for subsequent requests to the same server to be done."><code>Connection</code></a>
            header. HTTP/2 went a step further by multiplexing messages over a single connection, helping keep the
            connection warm and more efficient.</p>

        <p>Experiments are in progress to design a better transport protocol more suited to HTTP. For example, Google is
            experimenting with <a class="external" href="https://en.wikipedia.org/wiki/QUIC" rel="noopener">QUIC</a>
            which builds on UDP to provide a more reliable and efficient transport protocol.</p>

        <h2 id="What_can_be_controlled_by_HTTP">What can be controlled by HTTP</h2>

        <p>This extensible nature of HTTP has, over time, allowed for more control and functionality of the Web. Cache
            or authentication methods were functions handled early in HTTP history. The ability to relax the <em>origin
                constraint</em>, by contrast, has only been added in the 2010s.</p>

        <p>Here is a list of common features controllable with HTTP.</p>

        <ul>
            <li><em><a href="/en-US/docs/Web/HTTP/Caching">Caching</a></em><br>
                How documents are cached can be controlled by HTTP. The server can instruct proxies and clients, about
                what to cache and for how long. The client can instruct intermediate cache proxies to ignore the stored
                document.
            </li>
            <li><em>Relaxing the origin constraint</em><br>
                To prevent snooping and other privacy invasions, Web browsers enforce strict separation between Web
                sites. Only pages from the <strong>same origin</strong> can access all the information of a Web page.
                Though such constraint is a burden to the server, HTTP headers can relax this strict separation on the
                server side, allowing a document to become a patchwork of information sourced from different domains;
                there could even be security-related reasons to do so.
            </li>
            <li><em>Authentication</em><br>
                Some pages may be protected so that only specific users can access them. Basic authentication may be
                provided by HTTP, either using the <a href="/en-US/docs/Web/HTTP/Headers/WWW-Authenticate"
                                                      title="The HTTP WWW-Authenticate response header defines the authentication method that should be used to gain access to a resource."><code>WWW-Authenticate</code></a>
                and similar headers, or by setting a specific session using <a href="/en-US/docs/Web/HTTP/Cookies">HTTP
                    cookies</a>.
            </li>
            <li><em><a href="/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling">Proxy and tunneling</a></em><br>
                Servers or clients are often located on intranets and hide their true IP address from other computers.
                HTTP requests then go through proxies to cross this network barrier. Not all proxies are HTTP proxies.
                The SOCKS protocol, for example, operates at a lower level. Other protocols, like ftp, can be handled by
                these proxies.
            </li>
            <li><em>Sessions</em><br>
                Using HTTP cookies allows you to link requests with the state of the server. This creates sessions,
                despite basic HTTP being a state-less protocol. This is useful not only for e-commerce shopping baskets,
                but also for any site allowing user configuration of the output.
            </li>
        </ul>

        <h2 id="HTTP_flow">HTTP flow</h2>

        <p>When a client wants to communicate with a server, either the final server or an intermediate proxy, it
            performs the following steps:</p>

        <ol>
            <li>Open a TCP connection: The TCP connection is used to send a request, or several, and receive an answer.
                The client may open a new connection, reuse an existing connection, or open several TCP connections to
                the servers.
            </li>
            <li>Send an HTTP message: HTTP messages (before HTTP/2) are human-readable. With HTTP/2, these simple
                messages are encapsulated in frames, making them impossible to read directly, but the principle remains
                the same. For example:
                <pre class="line-numbers  language-html"><code class="language-html">GET / HTTP/1.1
Host: developer.mozilla.org
Accept-Language: fr</code></pre>
            </li>
            <li>Read the response sent by the server, such as:
                <pre class="line-numbers  language-html"><code class="language-html">HTTP/1.1 200 OK
Date: Sat, 09 Oct 2010 14:28:02 GMT
Server: Apache
Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT
ETag: "51142bc1-7449-479b075b2891b"
Accept-Ranges: bytes
Content-Length: 29769
Content-Type: text/html

&lt;!DOCTYPE html... (here comes the 29769 bytes of the requested web page)</code></pre>
            </li>
            <li>Close or reuse the connection for further requests.</li>
        </ol>

        <p>If HTTP pipelining is activated, several requests can be sent without waiting for the first response to be
            fully received. HTTP pipelining has proven difficult to implement in existing networks, where old pieces of
            software coexist with modern versions. HTTP pipelining has been superseded in HTTP/2 with more robust
            multiplexing requests within a frame.</p>

        <h2 id="HTTP_Messages">HTTP Messages</h2>

        <p>HTTP messages, as defined in HTTP/1.1 and earlier, are human-readable. In HTTP/2, these messages are embedded
            into a binary structure, a <em>frame</em>, allowing optimizations like compression of headers and
            multiplexing. Even if only part of the original HTTP message is sent in this version of HTTP, the semantics
            of each message is unchanged and the client reconstitutes (virtually) the original HTTP/1.1 request. It is
            therefore useful to comprehend HTTP/2 messages in the HTTP/1.1 format.</p>

        <p>There are two types of HTTP messages, requests and responses, each with its own format.</p>

        <h3 id="Requests">Requests</h3>

        <p>An example HTTP request:</p>

        <p><img alt="A basic HTTP request" src="https://mdn.mozillademos.org/files/13687/HTTP_Request.png"
                style="height: 336px; width: 693px;"></p>

        <p>Requests consists of the following elements:</p>

        <ul>
            <li>An HTTP <a href="/en-US/docs/Web/HTTP/Methods">method</a>, usually a verb like <a
                        href="/en-US/docs/Web/HTTP/Methods/GET"
                        title="The HTTP GET method requests a representation of the specified resource. Requests using GET should only retrieve data."><code>GET</code></a>,
                <a href="/en-US/docs/Web/HTTP/Methods/POST"
                   title="The HTTP POST method sends data to the server. The type of the body of the request is indicated by the Content-Type header."><code>POST</code></a>
                or a noun like <a href="/en-US/docs/Web/HTTP/Methods/OPTIONS"
                                  title="The HTTP OPTIONS method is used to describe the communication options for the target resource. The client can specify a URL for the OPTIONS method, or an asterisk (*) to refer to the entire server."><code>OPTIONS</code></a>
                or <a href="/en-US/docs/Web/HTTP/Methods/HEAD"
                      title="The HTTP HEAD method requests the headers that are returned if the specified resource would be requested with an HTTP GET method. Such a request can be done before deciding to download a large resource to save bandwidth, for example."><code>HEAD</code></a>
                that defines the operation the client wants to perform. Typically, a client wants to fetch a resource
                (using <code>GET</code>) or post the value of an <a href="/en-US/docs/Web/Guide/HTML/Forms">HTML
                    form</a> (using <code>POST</code>), though more operations may be needed in other cases.
            </li>
            <li>The path of the resource to fetch; the URL of the resource stripped from elements that are obvious from
                the context, for example without the <a class="glossaryLink" href="/en-US/docs/Glossary/protocol"
                                                        title="protocol: A protocol is a system of rules that define how data is exchanged within or between computers. Communications between devices require that the devices agree on the format of the data that is being exchanged. The set of rules that defines a format is called a protocol.">protocol</a>
                (<code>http://</code>), the <a class="glossaryLink" href="/en-US/docs/Glossary/domain"
                                               title='domain: A domain is an authority within the internet that controls its own resources. Its "domain name" is a way to address this authority as part of the hierarchy in a URL - usually the most memorable part of it, for instance a brand name.'>domain</a>
                (here, <code>developer.mozilla.org</code>), or the TCP <a class="glossaryLink"
                                                                          href="/en-US/docs/Glossary/port"
                                                                          title="port: For a computer connected to a network with an IP address, a port is a communication endpoint. Ports are designated by numbers, and below 1024 each port is associated by default with a specific protocol.">port</a>
                (here, <code>80</code>).
            </li>
            <li>The version of the HTTP protocol.</li>
            <li>Optional <a href="/en-US/docs/Web/HTTP/Headers">headers</a> that convey additional information for the
                servers.
            </li>
            <li>Or a body, for some methods like <code>POST</code>, similar to those in responses, which contain the
                resource sent.
            </li>
        </ul>

        <h3 id="Responses">Responses</h3>

        <p>An example response:</p>

        <p><img alt="" src="https://mdn.mozillademos.org/files/13691/HTTP_Response.png"
                style="height: 494px; width: 758px;"></p>

        <p>Responses consist of the following elements:</p>

        <ul>
            <li>The version of the HTTP protocol they follow.</li>
            <li>A <a href="/en-US/docs/Web/HTTP/Status">status code</a>, indicating if the request was successful, or
                not, and why.
            </li>
            <li>A status message, a non-authoritative short description of the status code.</li>
            <li>HTTP <a href="/en-US/docs/Web/HTTP/Headers">headers</a>, like those for requests.</li>
            <li>Optionally, a body containing the fetched resource.</li>
        </ul>

        <h2 id="APIs_based_on_HTTP">APIs based on HTTP</h2>

        <p>The most commonly used API based on HTTP is the <a href="/en-US/docs/Web/API/XMLHttpRequest"
                                                              title="Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing."><code>XMLHttpRequest</code></a>
            API, which can be used to exchange data between a <a class="glossaryLink"
                                                                 href="/en-US/docs/Glossary/user_agent"
                                                                 title="user agent: A user agent is a computer program representing a person, for example, a browser in a Web context.">user
                agent</a> and a server. The modern <a href="/en-US/docs/Web/API/Fetch_API"
                                                      title="The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set."><code>Fetch
                    API</code></a> provides the same features with a more powerful and flexible feature set.</p>

        <p>Another API, <a href="/en-US/docs/Web/API/Server-sent_events">server-sent events</a>, is a one-way service
            that allows a server to send events to the client, using HTTP as a transport mechanism. Using the <a
                    href="/en-US/docs/Web/API/EventSource"
                    title="The EventSource interface is web content's interface to server-sent events. An EventSource instance opens a persistent connection to an HTTP server, which sends events in text/event-stream format."><code>EventSource</code></a>
            interface, the client opens a connection and establishes event handlers. The client browser automatically
            converts the messages that arrive on the HTTP stream into appropriate <a href="/en-US/docs/Web/API/Event"
                                                                                     title="The Event interface represents an event which takes place in the DOM."><code>Event</code></a>
            objects, delivering them to the event handlers that have been registered for the events' <a
                    href="/en-US/docs/Web/API/Event/type"
                    title="The type read-only property of the Event interface returns a string containing the event's type. It is set when the event is constructed and is the name commonly used to refer to the specific event, such as click, load, or error."><code>type</code></a>
            if known, or to the <a href="/en-US/docs/Web/API/EventSource/onmessage"
                                   title="The onmessage property of the EventSource interface is an EventHandler called when a message event is received, that is when a message is coming from the source."><code>onmessage</code></a>
            event handler if no type-specific event handler was established.</p>

        <h2 id="Conclusion">Conclusion</h2>

        <p>HTTP is an extensible protocol that is easy to use. The client-server structure, combined with the ability to
            simply add headers, allows HTTP to advance along with the extended capabilities of the Web.</p>
    {% include "../_includes/next_steps.njk" %}
    </div>
{% endblock %}