{% set body_class = "CSS_page" %}
{% set Title = "HTML docs" %}
{% set Title_h1 = "Learn the basic of CSS" %}
{% extends "../../includes/base.njk" %}
{% block Css_links %}
    <link rel="stylesheet" href="{{ "/components/main.css"| url }}">
    <link rel="stylesheet" href="{{ "/components/next_steps.css"| url }}">
{% endblock %}
{% block Options %}
    <option value="<html>"></option>.
    <option value="<header>"></option>
    <option value="<body>"></option>
    <option value="<img>"></option>
    <option value="<a>"></option>
    <option value="<b>"></option>
    <option value="<i>"></option>
{% endblock %}

{% block Content %}

    <div class="block">
        <h2 id="Applying_CSS_to_your_HTML">Applying CSS to your HTML</h2>

        <p>The first thing we will look at are the three methods of applying CSS to a document.</p>

        <h3 id="External_stylesheet">External stylesheet</h3>

        <p>In the <a href="/en-US/docs/Learn/CSS/First_steps/Getting_started">Getting started with CSS</a> we linked an
            external stylesheet to our page. This is the most common and useful method of attaching CSS to a document as
            you can link the CSS to multiple pages, allowing you to style them all with the same stylesheet. In most
            cases, the different pages of a site will all look pretty much the same, therefore you can use the same set
            of rules for the basic look and feel.</p>

        <p>An external stylesheet is when you have your CSS written in a separate file with a <code>.css</code>
            extension, and you reference it from an HTML <code>&lt;link&gt;</code> element:</p>

        <pre class="brush: html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;My CSS experiment&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello World!&lt;/h1&gt;
    &lt;p&gt;This is my first CSS example&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>

        <p>The CSS file might look something like this:</p>

        <pre class="brush: css">h1 {
  color: blue;
  background-color: yellow;
  border: 1px solid black;
}

p {
  color: red;
}</pre>

        <p>The <code>href</code> attribute of the <a href="/en-US/docs/Web/HTML/Element/link"
                                                     title='The HTML External Resource Link element (&lt;link>) specifies relationships between the current document and an external resource. This element is most commonly used to link to stylesheets, but is also used to establish site icons (both "favicon" style icons and icons for the home screen and apps on mobile devices) among other things.'><code>&lt;link&gt;</code></a>
            element needs to reference a file on your filesystem.</p>

        <p>In the example above, the CSS file is in the same folder as the HTML document, but you could place it
            somewhere else and adjust the specified path to suit, for example:</p>

        <pre class="brush: html">&lt;!-- Inside a subdirectory called styles inside the current directory --&gt;
&lt;link rel="stylesheet" href="styles/style.css"&gt;

&lt;!-- Inside a subdirectory called general, which is in a subdirectory called styles, inside the current directory --&gt;
&lt;link rel="stylesheet" href="styles/general/style.css"&gt;

&lt;!-- Go up one directory level, then inside a subdirectory called styles --&gt;
&lt;link rel="stylesheet" href="../styles/style.css"&gt;</pre>

        <h3 id="Internal_stylesheet">Internal stylesheet</h3>

        <p>An internal stylesheet is where you don't have an external CSS file, but instead place your CSS inside a <a
                    href="/en-US/docs/Web/HTML/Element/style"
                    title="The HTML &lt;style> element contains style information for a document, or part of a document."><code>&lt;style&gt;</code></a>
            element contained inside the HTML <a href="/en-US/docs/Web/HTML/Element/head"
                                                 title="The HTML &lt;head> element contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets."><code>&lt;head&gt;</code></a>.
        </p>

        <p>So the HTML would look like this:</p>

        <pre class="brush: html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;My CSS experiment&lt;/title&gt;
    &lt;style&gt;
      h1 {
        color: blue;
        background-color: yellow;
        border: 1px solid black;
      }

      p {
        color: red;
      }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello World!&lt;/h1&gt;
    &lt;p&gt;This is my first CSS example&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>

        <p>This can be useful in some circumstances (maybe you're working with a content management system where you
            can't modify the CSS files directly), but it isn't quite as efficient as external stylesheets — in a
            website, the CSS would need to be repeated across every page, and updated in multiple places if changes were
            required.</p>

        <h3 id="Inline_styles">Inline styles</h3>

        <p>Inline styles are CSS declarations that affect one element only, contained within a <code>style</code>
            attribute:</p>

        <pre class="brush: html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;My CSS experiment&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1 style="color: blue;background-color: yellow;border: 1px solid black;"&gt;Hello World!&lt;/h1&gt;
    &lt;p style="color:red;"&gt;This is my first CSS example&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>

        <p><strong>Please don't do this, unless you really have to!</strong> It is really bad for maintenance (you might
            have to update the same information multiple times per document), and it also mixes your presentational CSS
            information with your HTML structural information, making the code harder to read and understand. Keeping
            different types of code separated makes for a much easier job for all who work on the code.</p>

        <p>There are a few places where inline styles are more common, or even advisable. You might have to resort to
            using them if your working environment is really restrictive (perhaps your CMS only allows you to edit the
            HTML body). You will also see them used a lot in HTML email in order to get compatibility with as many email
            clients as possible.</p>
        <h2 id="Selectors">Selectors</h2>

        <p>You can't talk about CSS without meeting selectors, and we have already discovered several different types in
            the <a href="/en-US/docs/Learn/CSS/First_steps/Getting_started">Getting started with CSS</a> tutorial. A
            selector is how we target something in our HTML document in order to apply styles to it. If your styles are
            not applying then it is likely that your selector does not match the thing you think it should match.</p>

        <p>Each CSS rule starts with a selector or a list of selectors in order to tell the browser which element or
            elements the rules should apply to. All of the following are examples of valid selectors, or lists of
            selectors.</p>

        <pre class="brush: css">h1
a:link
.manythings
#onething
*
.box p
.box p:first-child
h1, h2, .intro</pre>

        <p><strong>Try creating some CSS rules that use the above selectors, and some HTML to be styled by them. If you
                don't know what some of the above syntax means, try searching for it on MDN!</strong></p>

        <div class="blockIndicator note">
            <p><strong>Note</strong>: You will learn a lot more about selectors in our <a
                        href="/en-US/docs/Learn/CSS/Building_blocks/Selectors">CSS selectors</a> tutorials, in the next
                module.</p>
        </div>

        <h3 id="Specificity">Specificity</h3>

        <p>There will often be scenarios where two selectors could select the same HTML element. Consider the stylesheet
            below where I have a rule with a <code>p</code> selector that will set paragraphs to blue, and also a class
            that will set selected elements red.</p>

        <pre class="brush: css">.special {
  color: red;
}

p {
  color: blue;
}</pre>

        <p>Let's say that in our HTML document we have a paragraph with a class of <code>special</code>. Both rules
            could apply, so which one wins? What color do you think our paragraph will become?</p>

        <pre class="brush: html">&lt;p class="special"&gt;What color am I?&lt;/p&gt;</pre>

        <p>The CSS language has rules to control which rule will win in the event of a collision — these are called
            <strong>cascade</strong> and <strong>specificity</strong>. In the below code block we have defined two rules
            for the <code>p</code> selector, but the paragraph ends up being colored blue. This is because the
            declaration that sets it to blue appears later in the stylesheet, and later styles override earlier ones.
            This is the cascade in action.</p>

        <pre class="brush: css">p {
  color: red;
}

p {
  color: blue;
}</pre>

        <p>However, in the case of our earlier block with the class selector and the element selector, the class will
            win, making the paragraph red — even though it appears earlier in the stylesheet. A class is described as
            being more specific, or having more specificity than the element selector, so it wins.</p>

        <p><strong>Try the above experiment for yourself — add the HTML to your experiment, then add the two <code>p {
                    ... }</code> rules to your stylesheet. Next, change the first <code>p</code> selector to <code>.special</code>
                to see how it changes the styling.</strong></p>

        <p>The rules of specificity and the cascade can seem a little complicated at first and are easier to understand
            once you have built up further CSS knowledge. In our <a
                    href="/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance">Cascade and inheritance</a>
            article, which you'll get to in the next module, I'll explain this in detail, including how to calculate
            specificity. For now, remember that this exists, and that sometimes CSS might not apply like you expect it
            to because something else in your stylesheet has a higher specificity. Identifying that more than one rule
            could apply to an element is the first step in fixing such issues.</p>

        <h2 id="Properties_and_values">Properties and values</h2>

        <p>At its most basic level, CSS consists of two building blocks:</p>

        <ul>
            <li><strong>Properties</strong>: Human-readable identifiers that indicate which stylistic features (e.g.
                <code><a href="/en-US/docs/Web/CSS/font-size">font-size</a></code>, <code><a
                            href="/en-US/docs/Web/CSS/width">width</a></code>, <code><a
                            href="/en-US/docs/Web/CSS/background-color">background-color</a></code>) you want to change.
            </li>
            <li><strong>Values</strong>: Each specified property is given a value, which indicates how you want to
                change those stylistic features (e.g. what you want to change the font, width or background color to.)
            </li>
        </ul>

        <p>The below image highlights a single property and value. The property name is <code>color</code>, and the
            value <code>blue</code>.</p>

        <p><img alt="A declaration highlighted in the CSS"
                src="https://mdn.mozillademos.org/files/16498/declaration.png"
                style="border: 1px solid #cccccc; display: block; height: 218px; margin: 0 auto; width: 471px;"></p>

        <p>A property paired with a value is called a <em>CSS declaration</em>. CSS declarations are put within <em>CSS
                Declaration Blocks</em>. This next image shows our CSS with the declaration block highlighted.</p>

        <p><img alt="A highlighted declaration block"
                src="https://mdn.mozillademos.org/files/16499/declaration-block.png"
                style="border: 1px solid #cccccc; display: block; height: 218px; margin: 0 auto; width: 471px;"></p>

        <p>Finally, CSS declaration blocks are paired with <em>selectors</em> to produce <em>CSS Rulesets</em> (or <em>CSS
                Rules</em>). Our image contains two rules, one for the <code>h1</code> selector and one for the
            <code>p</code> selector. The rule for <code>h1</code> is highlighted.</p>

        <p><img alt="The rule for h1 highlighted" src="https://mdn.mozillademos.org/files/16500/rules.png"
                style="border: 1px solid #cccccc; display: block; height: 218px; margin: 0 auto; width: 471px;"></p>

        <p>Setting CSS properties to specific values is the core function of the CSS language. The CSS engine calculates
            which declarations apply to every single element of a page in order to appropriately lay it out and style
            it. What is important to remember is that both properties and values are case-sensitive in CSS. The property
            and value in each pair is separated by a colon (<code>:</code>).</p>

        <p><strong>Try looking up different values of the following properties, and writing CSS rules that apply them to
                different HTML elements: </strong></p>

        <ul>
            <li><strong><a href="/en-US/docs/Web/CSS/font-size"
                           title="The font-size CSS property sets the size of the font."><code>font-size</code></a></strong>
            </li>
            <li><strong><a href="/en-US/docs/Web/CSS/width"
                           title="The width CSS property sets an element's width. By default, it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area."><code>width</code></a></strong>
            </li>
            <li><strong><a href="/en-US/docs/Web/CSS/background-color"
                           title="The background-color CSS property sets the background color of an element."><code>background-color</code></a></strong>
            </li>
            <li><strong><a href="/en-US/docs/Web/CSS/color"
                           title="The color CSS property sets the foreground color value of an element's text and text decorations, and sets the currentcolor value."><code>color</code></a></strong>
            </li>
            <li><strong><a href="/en-US/docs/Web/CSS/border"
                           title="The border shorthand CSS property sets an element's border."><code>border</code></a></strong>
            </li>
        </ul>

        <div class="warning">
            <p><strong>Important</strong>: If a property is unknown or if a value is not valid for a given property, the
                declaration is deemed <em>invalid</em> and is completely ignored by the browser's CSS engine.</p>
        </div>

        <div class="warning">
            <p><strong>Important</strong>: In CSS (and other web standards), US spelling has been agreed on as the
                standard to stick to where language uncertainty arises. For example, <code>color</code> should <em>always</em>
                be spelled <code>color</code>. <code>colour</code> won't work.</p>
        </div>
        <h2 id="rules">@rules</h2>

        <p>As yet, we have not encountered <code><a href="/en-US/docs/Web/CSS/At-rule">@rules</a></code> (pronounced
            "at-rules"). These are special rules giving CSS some instruction on how to behave. Some <code>@rules</code>
            are simple with the rule name and a value. For example, to import an additional stylesheet into your main
            CSS stylesheet you can use <code>@import</code>:</p>

        <pre class="brush: css">@import 'styles2.css';</pre>

        <p>One of the most common <code>@rules</code> you will come across is <code>@media</code>, which allows you to
            use <a href="/en-US/docs/Web/CSS/Media_Queries">media queries</a> to apply CSS only when certain conditions
            are true (e.g. when the screen resolution is above a certain amount, or the screen is wider than a certain
            width).</p>

        <p>In the below CSS, we have a stylesheet that gives the <code>&lt;body&gt;</code> element a pink background
            color. However, we then use <code>@media</code> to create a section of our stylesheet that will only be
            applied in browsers with a viewport wider than 30em. If the browser is wider than 30em then the background
            color will be blue.</p>

        <pre class="brush: css">body {
  background-color: pink;
}

@media (min-width: 30em) {
  body {
    background-color: blue;
  }
}</pre>

        <p>You will encounter other <code>@rules</code> throughout these tutorials.</p>

        <p><strong>See if you can add a media query to your CSS that changes styles based on the viewport width. Change
                the width of your browser window to see the result.</strong></p>

        <h2 id="Shorthands">Shorthands</h2>

        <p>Some properties like <a href="/en-US/docs/Web/CSS/font"
                                   title="The font CSS property is a shorthand for font-style, font-variant, font-weight, font-stretch, font-size, line-height, and font-family. Alternatively, it sets an element's font to a system font."><code>font</code></a>,
            <a href="/en-US/docs/Web/CSS/background"
               title="The background shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method."><code>background</code></a>,
            <a href="/en-US/docs/Web/CSS/padding"
               title="The padding CSS property sets the padding area on all four sides of an element. It is a shorthand for padding-top, padding-right, padding-bottom, and padding-left."><code>padding</code></a>,
            <a href="/en-US/docs/Web/CSS/border"
               title="The border shorthand CSS property sets an element's border."><code>border</code></a>, and <a
                    href="/en-US/docs/Web/CSS/margin"
                    title="The margin CSS property sets the margin area on all four sides of an element. It is a shorthand for margin-top, margin-right, margin-bottom, and margin-left."><code>margin</code></a>
            are called <strong>shorthand properties</strong> — this is because they allow you to set several property
            values in a single line, saving time and making your code neater in the process.</p>

        <p>For example, this line:</p>

        <pre class="brush: css">/* In 4-value shorthands like padding and margin, the values are applied
   in the order top, right, bottom, left (clockwise from the top). There are also other
   shorthand types, for example 2-value shorthands, which set padding/margin
   for top/bottom, then left/right */
padding: 10px 15px 15px 5px;</pre>

        <p>Does the same thing as all these together:</p>

        <pre class="brush: css">padding-top: 10px;
padding-right: 15px;
padding-bottom: 15px;
padding-left: 5px;</pre>

        <p>Whereas this line:</p>

        <pre class="brush: css">background: red url(bg-graphic.png) 10px 10px repeat-x fixed;</pre>

        <p>Does the same thing as all these together:</p>

        <pre class="brush: css">background-color: red;
background-image: url(bg-graphic.png);
background-position: 10px 10px;
background-repeat: repeat-x;
background-attachment: fixed;</pre>

        <p>We won't attempt to teach these exhaustively now — you'll come across many examples later on in the course,
            and you are advised to look up the shorthand property names in our <a href="/en-US/docs/Web/CSS/Reference">CSS
                reference</a> to find out more.</p>

        <p><strong>Try adding the above declarations to your CSS to see how it affects the styling of your HTML. Try
                experimenting with some different values.</strong></p>

        <div class="blockIndicator warning">
            <p><strong>Warning</strong>: While shorthands often allow you to miss out values, they will then reset any
                values that you do not include to their initial values. This ensures that a sensible set of values are
                used. However, this might be confusing if you were expecting the shorthand to only change the values you
                passed in.</p>
        </div>

        <h2 id="Comments">Comments</h2>

        <p>As with HTML, you are encouraged to make comments in your CSS, to help you understand how your code works
            when coming back to it after several months, and to help others coming to the code to work on it understand
            it.</p>

        <p>Comments in CSS begin with <code>/*</code> and end with <code>*/</code>. In the below code block I have used
            comments to mark the start of different distinct code sections. This is useful to help you navigate your
            codebase as it gets larger — you can search for the comments in your code editor.</p>

        <pre class="brush: css">/* Handle basic element styling */
/* -------------------------------------------------------------------------------------------- */
body {
  font: 1em/150% Helvetica, Arial, sans-serif;
  padding: 1em;
  margin: 0 auto;
  max-width: 33em;
}

@media (min-width: 70em) {
  /* Let's special case the global font size. On large screen or window,
     we increase the font size for better readability */
  body {
    font-size: 130%;
  }
}

h1 {font-size: 1.5em;}

/* Handle specific elements nested in the DOM  */
/* -------------------------------------------------------------------------------------------- */
div p, #id:first-line {
  background-color: red;
  border-radius: 3px;
}

div p {
  margin: 0;
  padding: 1em;
}

div p + p {
  padding-top: 0;
}</pre>

        <p>Comments are also useful for temporarily <em>commenting out</em> certain parts of the code for testing
            purposes, for example if you are trying to find which part of your code is causing an error. In the next
            example I have commented out the rules for the <code>.special</code> selector.</p>

        <pre class="brush: css">/*.special {
  color: red;
}*/

p {
  color: blue;
}</pre>

        <p><strong>Add some comments to your CSS, to get used to using them.</strong></p>

        <h2 id="Whitespace">Whitespace</h2>

        <p>White space means actual spaces, tabs and new lines. In the same manner as HTML, the browser tends to ignore
            much of the whitespace inside your CSS; a lot of the whitespace is just there to aid readability.</p>

        <p>In our first example below we have each declaration (and rule start/end) on its own line — this is arguably a
            good way to write CSS, as it makes it easy to maintain and understand:</p>

        <pre class="brush: css">body {
  font: 1em/150% Helvetica, Arial, sans-serif;
  padding: 1em;
  margin: 0 auto;
  max-width: 33em;
}

@media (min-width: 70em) {
  body {
    font-size: 130%;
  }
}

h1 {
  font-size: 1.5em;
}

div p,
#id:first-line {
  background-color: red;
  border-radius: 3px;
}

div p {
  margin: 0;
  padding: 1em;
}

div p + p {
  padding-top: 0;
}
</pre>

        <p id="Very_compact">You could write exactly the same CSS like so, with most of the whitespace removed — this is
            functionally identical to the first example, but I'm sure you'll agree that it is somewhat harder to
            read:</p>

        <pre class="brush: css">body {font: 1em/150% Helvetica, Arial, sans-serif; padding: 1em; margin: 0 auto; max-width: 33em;}
@media (min-width: 70em) { body {font-size: 130%;} }

h1 {font-size: 1.5em;}

div p, #id:first-line {background-color: red; border-radius: 3px;}
div p {margin: 0; padding: 1em;}
div p + p {padding-top: 0;}
</pre>

        <p>The code layout you choose is usually a personal preference, although when you start to work in teams, you
            may find that the existing team has its own styleguide that specifies an agreed convention to follow.</p>

        <div class="blockIndicator warning">
            <p>The whitespace in CSS declarations separates values, but property names never have whitespace. You need
                to be careful of this in CSS.</p>
        </div>

        <p>For example, the following declarations are valid CSS:</p>

        <pre class="brush: css">margin: 0 auto;
padding-left: 10px;</pre>

        <p>But the following are invalid:</p>

        <pre class="brush: css">margin: 0auto;
padding- left: 10px;</pre>

        <div class="blockIndicator warning">
            <p><code>0auto</code> is not recognised as a valid value for the <code>margin</code> property
                (<code>0</code> and <code>auto</code> are two separate values,) and the browser does not recognise
                <code>padding-</code> as a valid property. So you should always make sure to separate distinct values
                from one another by at least a space, but keep property names and property values together as single
                unbroken strings.</p>
        </div>

        <p><strong>Try playing with whitespace inside your CSS, to see what breaks things and what doesn't.</strong></p>
        {% include "../../includes/CSS_next_steps.njk" %}
    </div>
{% endblock %}