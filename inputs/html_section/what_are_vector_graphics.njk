{% set body_class = "HTML_page" %}
{% set Title = "HTML docs" %}
{% set Title_h1 = "What are vector graphics?" %}
{% extends "../../includes/base.njk" %}
{% block Css_links %}
    <link rel="stylesheet" href="{{ "/components/main.css"| url }}">
    <link rel="stylesheet" href="{{ "/components/next_steps.css"| url }}">
{% endblock %}


{% block Content %}
    <div class="block">
        <p>On the web, you'll work with two types of image — <strong>raster images</strong>, and <strong>vector
                images</strong>:</p>

        <ul>
            <li><strong>Raster images</strong> are defined using a grid of pixels — a raster image file contains
                information
                showing exactly where each pixel is to be placed, and exactly what color it should be. Popular web
                raster
                formats include Bitmap (<code>.bmp</code>), PNG (<code>.png</code>), JPEG (<code>.jpg</code>), and GIF
                (<code>.gif</code>.)
            </li>
            <li><strong>Vector images</strong> are defined using algorithms — a vector image file contains shape and
                path
                definitions that the computer can use to work out what the image should look like when rendered on the
                screen. The <a href="https://developer.mozilla.org/en-US/docs/Glossary/SVG">SVG</a> format allows us to create powerful vector
                graphics
                for use on the Web.
            </li>
        </ul>

        <p>To give you an idea of the difference between the two, let's look at an example. You can find this example
            live
            on our Github repo as <a class="external"
                                     href="https://mdn.github.io/learning-area/html/multimedia-and-embedding/adding-vector-graphics-to-the-web/vector-versus-raster.html"
                                     rel="noopener">vector-versus-raster.html</a> — it shows two seemingly identical
            images
            side by side, of a red star with a black drop shadow. The difference is that the left one is a PNG, and the
            right one is an SVG image.</p>

        <p>The difference becomes apparent when you zoom in the page — the PNG image becomes pixellated as you zoom in
            because it contains information on where each pixel should be (and what color). When it is zoomed, each
            pixel is
            simply increased in size to fill multiple pixels on screen, so the image starts to look blocky. The vector
            image
            however continues to look nice and crisp, because no matter what size it is, the algorithms are used to work
            out
            the shapes in the image, with the values simply being scaled as it gets bigger.</p>

        <p><img alt="Two star images" src="https://mdn.mozillademos.org/files/12866/raster-vector-default-size.png"
                style="display: block; height: 112px; margin: 0px auto; width: 223px;"></p>

        <p><img alt="Two star images zoomed in, one crisp and the other blurry"
                src="https://mdn.mozillademos.org/files/12868/raster-vector-zoomed.png"
                style="display: block; height: 328px; margin: 0px auto; width: 677px;"></p>

        <div class="note">
            <p><strong>Note</strong>: The images above are actually all PNGs — with the left-hand star in each case
                representing a raster image, and the right-hand star representing a vector image. Again, go to the <a
                        class="external"
                        href="https://mdn.github.io/learning-area/html/multimedia-and-embedding/adding-vector-graphics-to-the-web/vector-versus-raster.html"
                        rel="noopener">vector-versus-raster.html</a> demo for a real example!</p>
        </div>

        <p>Moreover, vector image files are much lighter than their raster equivalents, because they only need to hold a
            handful of algorithms, rather than information on every pixel in the image individually.</p>

        <h2 id="What_is_SVG">What is SVG?</h2>

        <p><a href="https://developer.mozilla.org/en-US/docs/Web/SVG">SVG</a> is an <a href="https://developer.mozilla.org/en-US/docs/Glossary/XML">XML</a>-based language for
            describing vector images. It's basically markup, like HTML, except that you've got many different elements
            for
            defining the shapes you want to appear in your image, and the effects you want to apply to those shapes. SVG
            is
            for marking up graphics, not content. At the simplest end of the spectrum, you've got elements for creating
            simple shapes, like <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle"
                                   title="The &lt;circle> SVG element is an SVG basic shape, used to draw circles based on a center point and a radius."><code>&lt;circle&gt;</code></a>
            and <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect"
                   title="The &lt;rect> element is a basic SVG shape that draws rectangles, defined by their position, width, and height. The rectangles may have their corners rounded."><code>&lt;rect&gt;</code></a>.
            More advanced SVG features include <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feColorMatrix"
                                                  title="The &lt;feColorMatrix> SVG filter element changes colors based on a transformation matrix. Every pixel's color value  [R,G,B,A] is matrix multiplied by a 5 by 5 color matrix to create new color [R',G',B',A']."><code>&lt;feColorMatrix&gt;</code></a>
            (transform colors using a transformation matrix,) <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate"
                                                                 title="The SVG &lt;animate> element provides a way to animate an attribute of an element over time."><code>&lt;animate&gt;</code></a>
            (animate parts of your vector graphic,) and <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mask"
                                                           title="The &lt;mask> element defines an alpha mask for compositing the current object into the background. A mask is used/referenced using the mask property."><code>&lt;mask&gt;</code></a>
            (apply a mask over the top of your image.)</p>

        <p>As a simple example, the following code creates a circle and a rectangle:</p>

        <pre class="brush: html">&lt;svg version="1.1"
     baseProfile="full"
     width="300" height="200"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;rect width="100%" height="100%" fill="black" /&gt;
  &lt;circle cx="150" cy="100" r="90" fill="blue" /&gt;
&lt;/svg&gt;</pre>

        <p>This creates the following output:</p>

        <p>
            <iframe class="live-sample-frame hide-codepen-jsfiddle" frameborder="0" height="200" id="frame_What_is_SVG"
                    src="https://mdn.mozillademos.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web$samples/What_is_SVG?revision=1613202"
                    width="300"></iframe>
        </p>

        <p>From the example above, you may get the impression that SVG is easy to handcode. Yes, you can handcode simple
            SVG
            in a text editor, but for a complex image this quickly starts to get very difficult. For creating SVG
            images,
            most people use a vector graphics editor like <a class="external" href="https://inkscape.org/en/"
                                                             rel="noopener">Inkscape</a> or <a class="external"
                                                                                               href="https://en.wikipedia.org/wiki/Adobe_Illustrator"
                                                                                               rel="noopener">Illustrator</a>.
            These packages allow you to create a variety of illustrations using various graphics tools, and create
            approximations of photos (for example Inkscape's Trace Bitmap feature.)</p>

        <p>SVG has some additional advantages besides those described so far:</p>

        <ul>
            <li>Text in vector images remains accessible (which also benefits your <a
                        href="https://developer.mozilla.org/en-US/docs/Glossary/SEO">SEO</a>).
            </li>
            <li>SVGs lend themselves well to styling/scripting, because each component of the image is an element that
                can
                be styled via CSS or scripted via JavaScript.
            </li>
        </ul>

        <p>So why would anyone want to use raster graphics over SVG? Well, SVG does have some disadvantages:</p>

        <ul>
            <li>SVG can get complicated very quickly, meaning that file sizes can grow; complex SVGs can also take
                significant processing time in the browser.
            </li>
            <li>SVG can be harder to create than raster images, depending on what kind of image you are trying to
                create.
            </li>
            <li>SVG is not supported in older browsers, so may not be suitable if you need to support older versions of
                Internet Explorer with your web site (SVG started being supported as of IE9.)
            </li>
        </ul>

        <p>Raster graphics are arguably better for complex precision images such as photos, for the reasons described
            above.</p>

        <div class="note">
            <p><strong>Note</strong>: In Inkscape, save your files as Plain SVG to save space. Also, please refer to
                this <a
                        class="external" href="http://tavmjong.free.fr/INKSCAPE/MANUAL/html/Web-Inkscape.html"
                        rel="noopener">article describing how to prepare SVGs for the Web</a>.</p>
        </div>

        <h2 id="Adding_SVG_to_your_pages">Adding SVG to your pages</h2>

        <p>In this section we'll go through the different ways in which you can add SVG vector graphics to your web
            pages.</p>

        <h3 id="The_quick_way_&lt;img>">The quick way: <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img"
                                                          title="The HTML &lt;img> element embeds an image into the document."><code>&lt;img&gt;</code></a>
        </h3>

        <p>To embed an SVG via an <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img"
                                     title="The HTML &lt;img> element embeds an image into the document."><code>&lt;img&gt;</code></a>
            element, you just need to reference it in the src attribute as you'd expect. You will need a
            <code>height</code>
            or a <code>width</code> attribute (or both if your SVG has no inherent aspect ratio). If you have not
            already
            done so, please read <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML">Images in
                HTML</a>.
        </p>

        <pre class="brush: html">&lt;img
    src="equilateral.svg"
    alt="triangle with all three sides equal"
    height="87"
    width="100" /&gt;</pre>

        <h4 id="Pros">Pros</h4>

        <ul>
            <li>Quick, familiar image syntax with built-in text equivalent available in the <code>alt</code> attribute.
            </li>
            <li>You can make the image into a hyperlink easily by nesting the <code>&lt;img&gt;</code> inside an <a
                        href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a"
                        title="The HTML &lt;a> element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address."><code>&lt;a&gt;</code></a>
                element.
            </li>
            <li>The SVG file can be cached by the browser, resulting in faster loading times for any page that uses the
                image loaded in the future.
            </li>
        </ul>

        <h4 id="Cons">Cons</h4>

        <ul>
            <li>You cannot manipulate the image with JavaScript.</li>
            <li>If you want to control the SVG content with CSS, you must include inline CSS styles in your SVG code.
                (External stylesheets invoked from the SVG file take no effect.)
            </li>
            <li>You cannot restyle the image with CSS pseudoclasses (like <code>:focus</code>).</li>
        </ul>

        <h3 id="Troubleshooting_and_cross-browser_support">Troubleshooting and cross-browser support</h3>

        <p>For browsers that don't support SVG (IE 8 and below, Android 2.3 and below), you could reference a PNG or JPG
            from your <code>src</code> attribute and use a <code><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-srcset">srcset</a></code>
            attribute (which only recent browsers recognize) to reference the SVG. This being the case, only supporting
            browsers will load the SVG — older browsers will load the PNG instead:</p>

        <pre class="brush: html">&lt;img src="equilateral.png" alt="triangle with equal sides" srcset="equilateral.svg"&gt;</pre>

        <p>You can also use SVGs as CSS background images, as shown below. In the below code, older browsers will stick
            with
            the PNG that they understand, while newer browsers will load the SVG:</p>

        <pre class="brush: css"><code>background: url("fallback.png") no-repeat center;</code>
<code>background-image: url("image.svg");
background-size: contain;</code></pre>

        <p>Like the <code>&lt;img&gt;</code> method described above, inserting SVGs using CSS background images means
            that
            the SVG can't be manipulated with JavaScript, and is also subject to the same CSS limitations.</p>

        <p>If your SVGs aren't showing up at all, it might be because your server isn't set up properly. If that's the
            problem, this <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Getting_Started#A_Word_on_Webservers">article will point
                you
                in the right direction</a>.</p>

        <h3 id="How_to_include_SVG_code_inside_your_HTML">How to include SVG code inside your HTML</h3>

        <p>You can also open up the SVG file in a text editor, copy the SVG code, and paste it into your HTML document —
            this is sometimes called putting your <strong>SVG inline</strong>, or <strong>inlining SVG</strong>. Make
            sure
            your SVG code snippet begins and ends with the <code><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg">&lt;svg&gt;&lt;/svg&gt;</a></code>
            tags (don't include anything outside those.) Here's a very simple example of what you might paste into your
            document:</p>

        <pre class="brush: html">&lt;svg width="300" height="200"&gt;
    &lt;rect width="100%" height="100%" fill="green" /&gt;
&lt;/svg&gt;
</pre>

        <h4 id="Pros_2">Pros</h4>

        <ul>
            <li>Putting your SVG inline saves an HTTP request, and therefore can reduce a bit your loading time.</li>
            <li>You can assign <code>class</code>es and <code>id</code>s to SVG elements and style them with CSS, either
                within the SVG or wherever you put the CSS style rules for your HTML document. In fact, you can use any
                <a
                        href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute#Presentation_attributes">SVG presentation attribute </a>as a
                CSS
                property.
            </li>
            <li>Inlining SVG is the only approach that lets you use CSS interactions (like <code>:focus</code>) and CSS
                animations on your SVG image (even in your regular stylesheet.)
            </li>
            <li>You can make SVG markup into a hyperlink by wrapping it in an <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a"
                                                                                 title="The HTML &lt;a> element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address."><code>&lt;a&gt;</code></a>
                element.
            </li>
        </ul>

        <h4 id="Cons_2">Cons</h4>

        <ul>
            <li>This method is only suitable if you're using the SVG in only one place. Duplication makes for
                resource-intensive maintenance.
            </li>
            <li>Extra SVG code increases the size of your HTML file.</li>
            <li>The browser cannot cache inline SVG as it would cache regular image assets, so pages that include the
                image
                will not load faster after the first page containing the image is loaded.
            </li>
            <li>You may include fallback in a <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject"
                                                 title="The &lt;foreignObject> SVG element includes elements from a different XML namespace. In the context of a browser, it is most likely (X)HTML."><code>&lt;foreignObject&gt;</code></a>
                element, but browsers that support SVG still download any fallback images. You need to weigh whether the
                extra overhead is really worthwhile, just to support obsolescent browsers.
            </li>
        </ul>

        <ul>
        </ul>

        <h3 id="How_to_embed_an_SVG_with_an_&lt;iframe>">How to embed an SVG with an <a
                    href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"
                    title="The HTML Inline Frame element (&lt;iframe>) represents a nested browsing context, embedding another HTML page into the current one."><code>&lt;iframe&gt;</code></a>
        </h3>

        <p>You can open SVG images in your browser just like webpages. So embedding an SVG document with an <code>&lt;iframe&gt;</code>
            is done just like we studied in <a
                    href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies">From &lt;object&gt;
                to &lt;iframe&gt; — other embedding technologies</a>.</p>

        <p>Here's a quick review:</p>

        <pre class="brush: html">&lt;iframe src="triangle.svg" width="500" height="500" sandbox&gt;
    &lt;img src="triangle.png" alt="Triangle with three unequal sides" /&gt;
&lt;/iframe&gt;</pre>

        <p>This is definitely not the best method to choose:</p>

        <h4 id="Cons_3">Cons</h4>

        <ul>
            <li><code>iframe</code>s do have a fallback mechanism, as you can see, but browsers only display the
                fallback if
                they lack support for <code>iframe</code>s altogether.
            </li>
            <li>Moreover, unless the SVG and your current webpage have the same <a
                        href="https://developer.mozilla.org/en-US/docs/Glossary/origin">origin</a>, you cannot use JavaScript on your main webpage to
                manipulate the SVG.
            </li>
        </ul>


        <h2 id="Summary">Summary</h2>

        <p>This article has provided you with a quick tour of what vector graphics and SVG are, why they are useful to
            know
            about, and how to include SVG inside your webpages. It was never intended to be a full guide to learning
            SVG,
            just a pointer so you know what SVG is if you meet it in your travels around the Web. So don't worry if you
            don't feel like you are an SVG expert yet. We've included some links below that might help you if you wish
            to go
            and find out more about how it works.</p>

        <p>In the last article of this module we will explore responsive images in detail, looking at the tools HTML has
            to
            allow you to make your images work better across different devices.</p>

        {% include "../../includes/HTML_next_steps.njk" %}
    </div>
{% endblock %}